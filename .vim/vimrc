if has('win32') || has ('win64')
    " On windows, force the language to english.
    language messages en

	let g:vim_home = $HOME."/vimfiles/"
    let g:vim_hostname = $COMPUTERNAME
    set clipboard=unnamed
else
	let g:vim_home = $HOME."/.vim/"
    let g:vim_hostname = $HOSTNAME
    set clipboard=unnamedplus
endif

" Conditionally disable plugins {{{
"
"     The recommendatons for writing a plugin say that if a variable g:loaded_PLUGIN_NAME is deined,
"     the plugin shall not be loaded. Now, also in this file we depend for certain mappings on
"     plugins being loaded. However, the logic is a bit backwards. If the particular variable does
"     NOT exist, the plugin will be loaded. Keep that in mind on conditional loading...
"
let g:loaded_vim_which_key = 0
" }}}



" General {{{
    " Abbreviations
    abbr funciton function
    abbr teh the
    abbr tempalte template
    abbr fitler filter
    abbr cosnt const
    abbr attribtue attribute
    abbr attribuet attribute

    set autoread " detect when a file is changed
    " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/149214
    " Triger `autoread` when files changes on disk
    " https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
    " https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
    " Notification after file change
    " https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
    autocmd FileChangedShellPost *
    \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

    set history=1000 " change history to 1000
    set textwidth=120
    set viminfo^=%25

    " Uncomment the following to have Vim jump to the last position when
    " reopening a file
    if has("autocmd")
        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    endif

    if (has('nvim'))
        " show results of substition as they're happening
        " but don't open a split
        set inccommand=nosplit
    endif

    if has('mouse')
        set mouse=a
    endif

    " Searching
    set ignorecase " case insensitive searching
    set smartcase " case-sensitive if expresson contains a capital letter
    set hlsearch " highlight search results
    set incsearch " set incremental search, like modern browsers
    set nolazyredraw " don't redraw while executing macros

    set magic " Set magic on, for regex

    " error bells
    set noerrorbells
    set visualbell
    set t_vb=
    set tm=500

    set enc=utf-8
    set fileencoding=utf-8

    " Set the text width to and create a vertical bar.
    set textwidth=100
    set colorcolumn=101
    set fileencodings=ucs-bom,utf8,prc

    set directory=$HOME/.vim-tmp/,$HOME/.tmp/,$HOME/tmp
    set backupdir=$HOME/.vim-tmp/,$HOME/.tmp/,$HOME/tmp
    set backup

    " Keep undo history across sessions by storing it in a file
    if has('persistent_undo')
        let g:vim_undodir=expand("$HOME/.undodir")
        if ! isdirectory(g:vim_undodir)
            call mkdir(g:vim_undodir, 'p')
        endif
        let &undodir = g:vim_undodir
        set undofile
    endif

    let g:netrw_winsize=15

    set virtualedit=block,onemore

    " To avoid clashes in namespace, prefix the commands that fzf.vim exports with Fzf.
    let g:fzf_command_prefix='Fzf'

    " Preview window on the right side of the window,
    " hidden by default, ctrl-/ to toggle
    let g:fzf_preview_window = ['right:hidden', 'ctrl-/']

" }}}


" Appearance {{{
    set number " show line numbers
    set relativenumber
    set nowrap " turn off line wrapping
    set wrapmargin=8 " wrap lines when coming within n characters from side
    set linebreak " set soft wrapping
    set autoindent " automatically set indent of new line
    set ttyfast " faster redrawing
    set diffopt+=vertical,algorithm:patience
    set laststatus=2 " show the satus line all the time
    set scrolloff=2 " Set scroll offset so the active line stays towards the center.
    set wildmenu " enhanced command line completion
    set hidden " current buffer can be put into background
    set showcmd " show incomplete commands
    set noshowmode " don't show which mode disabled for PowerLine
    set wildmode=list:longest " complete files like a shell
    " set shell=$SHELL
    set cmdheight=1 " command bar height
    set title " set terminal title
    set showmatch " show matching braces
    set mat=2 " how many tenths of a second to blink
    set laststatus=2 " Always show the status line

    " Tab control
    set expandtab " insert tabs rather than spaces for <Tab>
    set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
    set tabstop=4 " the visible width of tabs
    set softtabstop=4 " edit as if the tabs are 4 characters wide
    set shiftwidth=4 " number of spaces to use for indent and unindent
    set shiftround " round indent to a multiple of 'shiftwidth'

    " Automatic formatting
    set nojoinspaces " when joining lines, do not use two spaces after a sentence

    " code folding settings
    set foldmethod=syntax " fold based on indent
    set foldlevelstart=99
    set foldnestmax=10 " deepest fold is 10 levels
    set nofoldenable " don't fold by default
    set foldlevel=1

    " toggle invisible characters
    set list&

    set ruler " Display a vertical ruler
    " switch cursor to line when in insert mode, and block when not
    set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
    \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
    \,sm:block-blinkwait175-blinkoff150-blinkon175

    " Use a blinking upright bar cursor in Insert mode, a blinking block in normal
    if &term == 'xterm-256color' || &term == 'screen-256color'
        let &t_SI = "\<Esc>[5 q"
        let &t_EI = "\<Esc>[1 q"
    endif

    " This leads to errors... It seems that the approach from above works also within tmux.
    " if exists('$TMUX')
    "     let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    "     let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    " endif

    " enable 24 bit color support if supported
    if (has("termguicolors"))
        if (!(has("nvim")))
            let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
            let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        endif
        set termguicolors
    endif

    " highlight conflicts
    match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

    " Marks should go to the column, not just the line. Why isn't this the default?
    nnoremap ' `

    " Set the timout for successful key combination detection.
    set timeoutlen=250

    " LightLine {{{
        let g:lightline = {
        \   'colorscheme': 'solarized',
        \   'active': {
        \       'left': [ [ 'mode', 'paste' ],
        \               [ 'gitbranch' ],
        \               [ 'readonly', 'filetype', 'filename' ]],
        \       'right': [ [ 'percent' ], [ 'lineinfo' ],
        \               [ 'fileformat', 'fileencoding' ]]
        \   },
        \   'component_type': {
        \       'readonly': 'error',
        \       'linter_warnings': 'warning',
        \       'linter_errors': 'error'
        \   },
        \   'component_function': {
        \       'fileencoding': 'LightlineFileEncoding',
        \       'filename': 'LightlineFileName',
        \       'fileformat': 'LightlineFileFormat',
        \       'gitbranch': 'LightlineGitBranch'
        \   },
        \   'tabline': {
        \       'left': [ [ 'tabs' ] ],
        \       'right': [ [ 'close' ] ]
        \   },
        \   'tab': {
        \       'active': [ 'filename', 'modified' ],
        \       'inactive': [ 'filename', 'modified' ],
        \   },
        \   'separator': { 'left': '', 'right': '' },
        \   'subseparator': { 'left': '', 'right': '' }
        \ }
        " \   'separator': { 'left': '¦¦¦', 'right': '¦¦¦' },
        " \   'subseparator': { 'left': '¦', 'right': '¦' }

        function! LightlineFileName() abort
            let filename = winwidth(0) > 70 ? expand('%') : expand('%:t')
            let modified = &modified ? ' +' : ''
            return fnamemodify(filename, ":~:.") . modified
        endfunction

        function! LightlineFileEncoding()
            return winwidth(0) > 70 ? &fileencoding : ''
        endfunction

        function! LightlineFileFormat()
            return winwidth(0) > 70 ? &fileformat : ''
        endfunction

        function! LightlineGitBranch()
            return (exists('*fugitive#head') ? fugitive#head() : '')
        endfunction

    " }}}
" }}}



" General Mappings {{{
    " set a map leader for more key combos
    let mapleader = ','

    if ! exists('g:loaded_vim_which_key')
        " Use vim-which-key plugin to show a description of shortcuts. This is in effect, if one is too
        " slow typing valid complete leader command sequences.
        nnoremap <silent> <leader> :WhichKey ','<CR>
        vnoremap <silent> <leader> :WhichKeyVisual ','<CR>
        " This is the global variable devining the descriptions. It is filled below, close to the key
        " mappings. Note, this map needs to be registered at the plugin (in a after/plugin/*.vim file).
        let g:which_key_map = {}
    endif



    "     "These are to cancel the default behavior of d, D, c, C
    "     "  to put the text they delete in the default register.
    "     "  Note that this means e.g. "ad won't copy the text into
    "     "  register a anymore.  You have to explicitly yank it.
    "     nnoremap d "_d
    "     vnoremap d "_d
    "     nnoremap D "_D
    "     vnoremap D "_D
    "     nnoremap c "_c
    "     vnoremap c "_c
    "     nnoremap C "_C
    "     vnoremap C "_C
    "     nnoremap p "_p
    "     xnoremap P "_P
    "     nnoremap p "_p
    "     xnoremap P "_P

    " copy to attached terminal using the yank(1) script:
    " https://github.com/sunaku/home/blob/master/bin/yank
    function! Yank(text) abort
        let escape = system('yank', a:text)
        if v:shell_error
            echoerr escape
        else
            call writefile([escape], '/dev/tty', 'b')
        endif
    endfunction
    noremap <silent> <Leader>y y:<C-U>call Yank(@0)<CR>

    " Avoid the escape key http://vim.wikia.com/wiki/Avoid_the_escape_key
    inoremap jk <Esc>
    inoremap kj <Esc>

    " shortcut to save
    nmap <leader>, :w<cr>

    " set paste toggle
    set pastetoggle=<leader>v

    " clear highlighted search
    " noremap <space> :set hlsearch! hlsearch?<cr>

    " activate spell-checking alternatives
    nmap ;s :set invspell spelllang=en<cr>

    "" from http://vim.wikia.com/wiki/Quickly_adding_and_deleting_empty_lines
    " nnoremap <silent><C-k> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
    " nnoremap <silent><C-j> :set paste<CR>m`O<Esc>``:set nopaste<CR>

    set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣

    " Toggle highlighting of search results
    ":nnoremap <silent><expr> <Leader>s (&hls && v:hlsearch ? ':nohls' : ':set hls')."\n"

    " Textmate style indentation
    " vmap <leader>[ <gv
    " vmap <leader>] >gv
    " nmap <leader>[ <<
    " nmap <leader>] >>

    " switch between current and last buffer
    nnoremap <Leader>. :<C-u>FzfBuffers<CR>

    " enable . command in visual mode
    vnoremap . :normal .<cr>

    " Navigation cursors in insert mode
    " inoremap <C-k> <Up>
    " inoremap <C-j> <Down>
    " inoremap <C-l> <Right>
    " inoremap <C-h> <Left>

    " map <silent> <C-h> :call functions#WinMove('h')<cr>
    " map <silent> <C-j> :call functions#WinMove('j')<cr>
    " map <silent> <C-k> :call functions#WinMove('k')<cr>
    " map <silent> <C-l> :call functions#WinMove('l')<cr>

    nnoremap <silent> <leader>z :call functions#zoom()<cr>

    vnoremap $( <esc>`>a)<esc>`<i(<esc>
    vnoremap $[ <esc>`>a]<esc>`<i[<esc>
    vnoremap ${ <esc>`>a}<esc>`<i{<esc>
    vnoremap $" <esc>`>a"<esc>`<i"<esc>
    vnoremap $' <esc>`>a'<esc>`<i'<esc>
    vnoremap $\ <esc>`>o*/<esc>`<O/*<esc>
    vnoremap $< <esc>`>a><esc>`<i<<esc>

    " scroll the viewport faster
    nnoremap <C-e> 3<C-e>
    nnoremap <C-y> 3<C-y>

    " Open new split panes to right and bottom, which feels more natural.
    set splitbelow
    set splitright

    " Automatically reload buffers when re-entering vim.
    autocmd! BufWinLeave * let b:winview = winsaveview()
    autocmd! BufWinEnter * if exists('b:winview') | call winrestview(b:winview) | unlet b:winview

    " Turn off linewise keys. Normally, the `j' and `k' keys move the cursor down one entire line.
    " with line wrapping on, this can cause the cursor to actually skip a few lines on the screen
    " because it's moving from line N to line N+1 in the file. I want this to act more visually -- I
    " want `down' to mean the next line on the screen moving up and down work as you would expect
    nnoremap <silent> j gj
    nnoremap <silent> k gk
    nnoremap <silent> ^ g^
    nnoremap <silent> $ g$

    " This enables "after-objects", a textobject that is everything after one of the following
    " characters. Note this is from a plugin vim-after-objects.
    autocmd VimEnter * call after_object#enable('=', ':', '-', '#', ' ')

    " Use the space key to toggle folds
    " nnoremap <space> za
    " vnoremap <space> zf

    " Comment a line and move to the next line (using vim-commentary)
    nnoremap <C-/> :Commentary<CR>j
    vnoremap <C-/> :Commentary<CR>`>j

    " Super fast window manipulation shortcuts
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.w = { 'name' : '+window' }
        let g:which_key_map.w.j = 'jump down'
        let g:which_key_map.w.k = 'jump up'
        let g:which_key_map.w.h = 'jump left'
        let g:which_key_map.w.l = 'jump right'
        let g:which_key_map.w['<'] = 'smaller'
        let g:which_key_map.w['>'] = 'bigger'
    endif
    nnoremap <Leader>wj <C-W>j
    nnoremap <Leader>wk <C-W>k
    nnoremap <Leader>wh <C-W>h
    nnoremap <Leader>wl <C-W>l
    nnoremap <silent> <Leader>w< :exe "vertical resize " . (winwidth(0) * 4/5)<CR>
    nnoremap <silent> <Leader>w> :exe "vertical resize " . (winwidth(0) * 5/4)<CR>

    " Finding stuff
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.f = { 'name' : '+find' }
        let g:which_key_map.f.f = 'file'
        let g:which_key_map.f.b = 'buffer'
        let g:which_key_map.f.h = 'history'
        let g:which_key_map.f.t = 'tag'
        let g:which_key_map.f.g = 'grep'
        let g:which_key_map.f['*'] = 'word in files'
        if (has('nvim'))
            let g:which_key_map.f.r = 'references'
        endif
    endif
    nnoremap <Leader>ff :<C-u>FzfFiles<CR>
    nnoremap <Leader>fb :<C-u>FzfBuffers<CR>
    nnoremap <Leader>fh :<C-u>FzfHistory<CR>
    nnoremap <Leader>ft :<C-u>FzfTags<CR>
    nnoremap <Leader>fg :Rg ""<left>
    nnoremap <expr> <Leader>f* ':Rg "'.expand('<cexpr>').'"<CR>'
    if (has('nvim'))
        nnoremap <Leader>fr <cmd>lua vim.lsp.buf.references()<CR>
    endif

    " Jumping/going to positions
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.g = { 'name' : '+goto' }
        if (has('nvim'))
            let g:which_key_map.g.d ='definition'
            let g:which_key_map.g.a ='alternate (source/header)'
        endif
    endif
    if (has('nvim'))
        nnoremap <Leader>gd <cmd>lua vim.lsp.buf.definition()<CR>
        nnoremap <Leader>ga <cmd>ClangdSwitchSourceHeader<CR>
    endif

    " Refactoring stuff
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.r = { 'name' : '+refactor' }
        let g:which_key_map.r.f = 'format'
        if (has('nvim'))
            let g:which_key_map.r.r = 'rename'
        endif
    endif
    nnoremap <Leader>rf :<C-u>call FormatDocument()<CR>
if (has('nvim'))
    nnoremap <Leader>rr <cmd>lua vim.lsp.buf.rename()<CR>
    vnoremap <Leader>rf <cmd>lua vim.lsp.buf.range_formatting()<CR>
endif

    " Useful common substitution commands
    " We make all substitution commands per default operate on the full buffer.
    " To have it operate on something else, use visual mode.
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.s = { 'name' : '+subst' }

        " Substitute slashes
        let g:which_key_map.s.s = { 'name' : '+slashes' }
        let g:which_key_map.s.s.u = 'unix'
        let g:which_key_map.s.s.l = 'linux'
        let g:which_key_map.s.s.w = 'windows'
    endif
    " Convert backslashes to forward slashes (windows->unix)
    nnoremap <leader>ssu :s!\\!/!g<CR>
    vnoremap <leader>ssu :s!\\!/!g<CR>
    " Convert backslashes to forward slashes (windows->linux)
    nnoremap <leader>ssl :s!\\!/!g<CR>
    vnoremap <leader>ssl :s!\\!/!g<CR>
    " Convert forward slashes to backslashes (linux->windows)
    nnoremap <leader>ssw :s!/!\\!g<CR>
    vnoremap <leader>ssw :s!/!\\!g<CR>
    " Convert a hex string to comma separated list of bytes
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.s.h = { 'name' : '+hex' }
        let g:which_key_map.s.h.b = 'bytes (c)'
    endif
    nnoremap <leader>shb :s!\([0-9a-fA-F][0-9a-fA-F]\)!0x\1, !g<CR>
    vnoremap <leader>shb :s!\([0-9a-fA-F][0-9a-fA-F]\)!0x\1, !g<CR>

    " Substitute whitespace
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.s.w = { 'name' : '+whitespace' }
        let g:which_key_map.s.w.e = 'whitespace at eol'
        let g:which_key_map.s.w.n = 'consecutive newlines'
        let g:which_key_map.s.w.u = 'unix eol'
        let g:which_key_map.s.w.w = 'windows eol'
    endif
    nnoremap <leader>swe :s/\s\+$<cr>
    vnoremap <leader>swe :s/\s\+$<cr>
    nnoremap <leader>swn :s/\n\{2,}/\r\r/g<cr>
    vnoremap <leader>swn :s/\n\{2,}/\r\r/g<cr>
    nnoremap <leader>swu :<C-u>set ff=unix<cr>
    nnoremap <leader>sww :<C-u>set ff=dos<cr>

    " Edit commonly used filed
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.e = { 'name' : '+edit/open' }
        let g:which_key_map.e.v = '.vimrc'
        let g:which_key_map.e.g = '~/.gitconfig'
    endif
    nnoremap <leader>ev :e! <C-R>=g:vim_home<CR>vimrc<CR>
    nnoremap <leader>eg :e! ~/.gitconfig<cr>

    " Listing things
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.l = { 'name' : '+list' }
        if (has('nvim'))
            let g:which_key_map.l.s = { 'name' : 'doc symbols' }
            let g:which_key_map.l.w = { 'name' : 'workspace symbols' }
        endif
    endif
    if (has('nvim'))
        nnoremap <leader>ls <cmd>lua vim.lsp.buf.document_symbol()<CR>
        nnoremap <leader>lw <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
    endif

    " Toggle features
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.t = { 'name' : '+toggle' }
        let g:which_key_map.t.l = { 'name' : 'listchars' }
        let g:which_key_map.t.p = { 'name' : 'paste' }
        let g:which_key_map.t.r = { 'name' : 'rainbowparentheses' }
        if (has('nvim'))
            let g:which_key_map.t.c = { 'name' : 'autocomplete' }
        endif
    endif
    nnoremap <leader>tl :set list!<cr>
    nnoremap <leader>tp :set paste!<cr>
    nnoremap <leader>tr :RainbowParentheses!!<cr>
    if (has('nvim'))
        nnoremap <leader>tc :CompletionToggle<cr>
    endif

    " Display context help/information
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.c = { 'name' : '+context' }
        if (has('nvim'))
            let g:which_key_map.c.i = { 'name' : 'info' }
            let g:which_key_map.c.s = { 'name' : 'signature' }
        endif
    endif
    if (has('nvim'))
        nnoremap <leader>ci <cmd>lua vim.lsp.buf.hover()<CR>
        nnoremap <leader>cs <cmd>lua vim.lsp.buf.signature_help()<CR>
    endif

    " Buffer management
    if ! exists('g:loaded_vim_which_key')
        let g:which_key_map.b = { 'name' : '+buffer' }
        let g:which_key_map.b.e = { 'name' : 'list' }
        let g:which_key_map.b.t = { 'name' : 'toggle' }
    endif
    " Note, these are imlicitly assigned by bufexplorer plugin


    " Misc
if (has('nvim'))
    nnoremap ]e <cmd>lua vim.lsp.diagnostic.goto_next()<CR>
    nnoremap [e <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
endif



    " shortcuts for 3-way merge
    map <Leader>1 :diffget 1<CR>
    map <Leader>2 :diffget 2<CR>
    map <Leader>3 :diffget 3<CR>


    " helpers for dealing with other people's code
    " nmap \t :set ts=4 sts=4 sw=4 noet<cr>
    " nmap \s :set ts=4 sts=4 sw=4 et<cr>
" }}}

" General Functionality {{{

    " Close buffers but keep splits
    nnoremap <leader>Q :Sayonara<cr>
    nnoremap <leader>q :Sayonara!<cr>

    " Command line abbreviation so %% expands to the full path of
    " the directory that contains the current file
    cabbr <expr> %% expand('%:p:h')

    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)

    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)

    " After block yank and paste, move cursor to the end of operated text
    " and don't override register
    vnoremap y y`]
    vnoremap <expr> p 'pgv"'.v:register.'y`]'
    nnoremap p p`]

" }}}

" Colorscheme and final setup {{{

    set background=light
    colorscheme solarized8_high

    syntax on

    " For large files, disable syntax highlighting
    autocmd Filetype * if getfsize(@%) > 1000000 | setlocal syntax=OFF | endif

    let g:rainbow#pairs = [['(', ')'], ['[', ']'],['{','}']]

    filetype plugin indent on

    " Highlight the active line and the active column.
    set cursorline

" }}}



if has("gui_running")
	" GUI is running or is about to start.
	" Maximize gvim window (for an alternative on Windows, see simalt below).
	set lines=999 columns=999
    set guioptions-=e
    set guioptions-=t
    set guioptions-=T
	if has("gui_gtk2") || has("gui_gtk3")
        set guifont=JetBrains\ Mono\ 11,Inconsolata\ 11
    elseif has("gui_photon")
        set guifont=Consolas:s11
    elseif has("gui_kde")
        set guifont=Consolas/11/-1/5/50/0/0/0/1/0
    elseif has("x11")
        set guifont=-*-courier-medium-r-normal-*-*-180-*-*-m-*-*
    else
        set guifont=Consolas:h11:cDEFAULT
  endif
endif


" Code completion {{{

    " Use <Tab> and <S-Tab> to navigate through popup menu
    inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
    inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

    " Set completeopt to have a better completion experience
    set completeopt=menuone,noinsert,noselect

    " Avoid showing message extra message when using completion
    set shortmess+=c

    if (has('nvim'))
        let g:completion_enable_auto_popup=1
        let g:completion_matching_smart_case=1
        let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy', 'all']

        imap <tab> <Plug>(completion_smart_tab)
        imap <s-tab> <Plug>(completion_smart_s_tab)


        let g:completion_chain_complete_list = {
            \ 'c': [
            \    {'complete_items': ['lsp', 'snippet']},
            \    {'mode': '<c-p>'},
            \    {'mode': '<c-n>'}
            \],
            \ 'cpp': [
            \    {'complete_items': ['lsp', 'snippet']},
            \    {'mode': '<c-p>'},
            \    {'mode': '<c-n>'}
            \],
            \ 'default': [
            \    {'complete_items': ['buffers']},
            \    {'mode': '<c-p>'},
            \    {'mode': '<c-n>'}
            \]
        \}
    endif

    " The next binding makes a difference only when autocompletion is enabled. If the popup is shown
    " and an entry is selected, per default ESC would close the popup but keep the selected entry
    " inserted. With this binding, the selection is cancelled and no text is inserted. Note, for
    " some reason (yet to be understood) this is causing issues when using vim in MSYS.
    " It also is causing an insertion of a C character to exit insert mode and trigger an undo
    " operaion on a terminal vim (but only when run on a certain machine (NxDI) - not sure wheter it
    " is caused by a particular vim version). We are NOT using the mapping for now due to those
    " reasons.
    " inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"

    inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
    inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
    inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
    inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
    inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

    inoremap <expr> <C-j>      pumvisible() ? "\<C-n>" : "\<C-j>"
    inoremap <expr> <C-k>      pumvisible() ? "\<C-p>" : "\<C-k>"
    inoremap <expr> <C-d>      pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
    inoremap <expr> <C-u>      pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

" }}}

" {{{ Formatting of a document
    function! FormatDocument()
        let filename = expand("%:p")
        if &filetype ==# 'rust'
            write
            let format_command = "rustfmt " . fnameescape(filename)
            let output = system(format_command)
            edit
        elseif &filetype ==# 'json'
            :% !python -m json.tool
        endif
    endfunction
" }}}



" {{{ Location lists and quickfix
"
    " wrap :cnext/:cprevious and :lnext/:lprevious
    function! WrapCommand(direction, prefix)
        if a:direction == "up"
            try
                execute a:prefix . "previous"
            catch /^Vim\%((\a\+)\)\=:E553/
                execute a:prefix . "last"
            catch /^Vim\%((\a\+)\)\=:E\%(776\|42\):/
            endtry
        elseif a:direction == "down"
            try
                execute a:prefix . "next"
            catch /^Vim\%((\a\+)\)\=:E553/
                execute a:prefix . "first"
            catch /^Vim\%((\a\+)\)\=:E\%(776\|42\):/
            endtry
        endif
    endfunction


    " <Home> and <End> go up and down the quickfix list and wrap around
    nnoremap <silent> [q :call WrapCommand('up', 'c')<CR>
    nnoremap <silent> ]q  :call WrapCommand('down', 'c')<CR>

    " <C-Home> and <C-End> go up and down the location list and wrap around
    nnoremap <silent> [l :call WrapCommand('up', 'l')<CR>
    nnoremap <silent> ]l  :call WrapCommand('down', 'l')<CR>

" }}}
